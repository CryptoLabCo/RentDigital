///////////////////////////////////////////////////////////////////////////////////
Deployed Contracts:
///////////////////////////////////////////////////////////////////////////////////
Rinkeby Testnet - RDAsset.sol: 0x33c341aDbE7661Ca0059eBB304761Dd0f377B6cd
Rinkeby Testnet - Usdt.sol: 0xBfD733DAaCE5fC827937D90F6a8d42A289c33Eb9

///////////////////////////////////////////////////////////////////////////////////
Deployed Website:
///////////////////////////////////////////////////////////////////////////////////
https://rentdigital.netlify.app/

///////////////////////////////////////////////////////////////////////////////////
// Steps to start dApp from localhost
///////////////////////////////////////////////////////////////////////////////////
//Start the Hardhat node
npx hardhat node

// Deploy the contracts
npx hardhat run --network localhost scripts/1_deploy_constracts_test.js
 
// Copy the output into the readme file for future reference
// Sample Output:
//RDAsset deployed to: 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 by 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
//Tether deployed to: 0x8464135c8F25Da09e49BC8782676a84730C318bC by 0x70997970C51812dc3A010C7d01b50e0d17dc79C8

// Open the frontend --> .env file
Replace these variables with the deployemnt addresses you just crreated
// Sample Values
REACT_APP_RDASSET_SMART_CONTRACT_ADDR=0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 
REACT_APP_MOCH_USDT_SMART_CONTRACT_ADDR=0x8464135c8F25Da09e49BC8782676a84730C318bC

// Open Metamask and setup or open the Hardhat Localhost: http://127.0.0.1:8545/
// This is the address in the npx hardhat node terminal window above, which is just above the list of walltet addresses

// Import a couple accounts into metamask:
// Use the Hardhat Node Terminal wallet address list to choose from.
// Get the private keys from the npx hardhat node terminal window and create account in MetaMask
// Should create at least 1 0r 2 accounts to represent different shareholders
// Should create 1 account to represent 1 renter: paying there rent

// Import tokens into metamask by using the USDT deployment address.

// Everytime you restart the React webserver to run site do this for each account:
// Open Metamask, click settings -> advanced -> Reset Account
// This reset the network nouance number so wierd things don't happen

// Start React website
cd frontend
npm run start

///////////////////////////////////////////////////////////////////////////////////
// Steps to start dApp from Rinkeby Testnet
///////////////////////////////////////////////////////////////////////////////////
// Start React website
cd frontend
npm run start

// Run all the smart contract test scripts and make sure they all pass. This also compiles the code
npx run test

// Copy the RDAsset.json and USDT.json from the artifacts folder in the project directory
// Paste then to the frontend -> src folder
// Rename to RDAsset_abi.json and USDT_abi.json

// Hardhat.config.js
// Update the URL with your Blockchain EndPoint(i.e. Infura)
// Update the Accounts with your Private Key from the account you want to use for deploying the smart contracts. Note: This will be the RDAsset smart contract owner address

// Deploy the contracts to Rinkeby Testmet
npx hardhat run --network localhost scripts/2_deploy_constracts_testnet.js
 
// Copy the output into the readme file for future reference
// Sample Output:
//RDAsset deployed to: 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512
//Tether deployed to: 0x8464135c8F25Da09e49BC8782676a84730C318bC

// Open the frontend --> .env file
Replace these variables with the deployemnt addresses you just crreated
// Sample Values
REACT_APP_RDASSET_SMART_CONTRACT_ADDR=0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 
REACT_APP_MOCH_USDT_SMART_CONTRACT_ADDR=0x8464135c8F25Da09e49BC8782676a84730C318bC

// Open Metamask and setup or open the Rinkeby Testnet

// Import a couple accounts into metamask:
// Use the Hardhat Node Terminal wallet address list to choose from.
// Get the private keys from the npx hardhat node terminal window and create account in MetaMask
// Should create at least 1 0r 2 accounts to represent different shareholders
// Should create 1 account to represent 1 renter: paying there rent

// Import tokens into metamask by using the USDT deployment address.

// Review the deployment account you used. It should have 2,000,000 Moch USDT tokens

// Send 500,000 USDT to another account: acts as the shareholder
// Send 100,000 USDT to another account; acts as the renter

// Everytime you restart the React webserver to run site do this for each account:
// Open Metamask, click settings -> advanced -> Reset Account
// This reset the network nouance number so wierd things don't happen

// Start React website
cd frontend
npm run start

///////////////////////////////////////////////////////////////////////////////////
// Steps to deploy dApp to Netlify.com
///////////////////////////////////////////////////////////////////////////////////
// Build App for Deploying to Web Hosting Company

In VS Terminal
cd frontend
npm run build

//Go to Netlify.com and sign-up or log-in

// Click Sites navigation item

// Select Create New Site --> Deploy Manually

// Drag the newly created Build folder in your project from windows explorer to the Drag & Drop area on the Netlify.com site 

// Let it build and then go to the Site Settings and change the generic name to something you like

// Click on the new website link and it starts the dApp.




